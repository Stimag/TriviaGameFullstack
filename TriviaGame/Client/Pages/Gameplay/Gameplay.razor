@page "/gameplay/{topic}"
@inject TriviaService TriviaService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.Net.Http.Json

<!-- As long as there are more questions and lives is higher than 0, load gameplay elements -->
@if (currentQuestion != null && lives > 0)
{
    // Question box
    <div id="questionBox">
        <div id="questionNumber">Question @questionNumber</div>
        <div id="questionText">@currentQuestion.QuestionText</div>
    </div>

    // Timer and lives
    <div id="timerAndLivesBox">
        <div id="timer">Time left: @timeLeft</div>
        <div id="lives">Lives: @lives</div>
    </div>

    // Choice boxes and functionality
    <div class="choices">
        @foreach (var choice in currentQuestion.TriviaChoices)
        {
            <div class='@(isAnswered && userChoice == choice ? (choice.IsCorrect == "Y" ? "correct" : "incorrect") : "")                        
                        @(isAnswered ? "disabled" : "")'
                        @onclick="() => CheckAnswer(choice)">
                        @choice.ChoiceText
            </div>
        }
    </div>
}
else if (questions != null && questions.Count > 0)
{
    // Redirect to results page if 0 lives are left or if there are no more questions
    NavigationManager.NavigateTo("/results");
}
else
{
    <p class="loadingText">Loading...</p>
}

@code {
    private bool isPageLoaded = false;

    private List<TriviaQuestion>? questions;

    private TriviaQuestion? currentQuestion;
    private TriviaChoice? userChoice;
    private bool isAnswered = false;
    private int questionNumber = 1;
    private int totalQuestions;

    private System.Threading.Timer? timer;
    private int timeLeft = 15;
    private int lives = 3;

    private string topic;

    [Parameter]
    public string Topic
    {
        get => topic;
        set
        {
            topic = value;
        }
    }

    // Perform synchronous operations on loading component
    protected override void OnInitialized() 
    {
        isPageLoaded = true; 

        if (questions is not null)
        {
            totalQuestions = questions.Count;
        }
    }

    //  Perform asynchronous operations on loading component
    protected override async Task OnInitializedAsync()
    {
        await GetQuestions();
        GetNextQuestion();
    }

    // Get questions
    private async Task GetQuestions()
    {
        questions = await TriviaService.GetRandomQuestions(topic);
    }

    // Get next question
    private void GetNextQuestion()
    {
        if (questions != null && questions.Count > 0 && lives > 0)
        {
            currentQuestion = questions[0];
            if (isPageLoaded) 
            {
                StartTimer();
            }
        }
        else
        {
            currentQuestion = null;
        }

        isAnswered = false;
    }

    // Check if answer is locked in and load next question if it is
    private void CheckAnswer(TriviaChoice? choice)
    {
        userChoice = choice;

        if (!isAnswered)
        {
            isAnswered = true;
            ResetTimer();  
        }

        if (choice is not null && choice.IsCorrect == "N")
        {
            lives--;
        }

        if (questions != null && questions.Count > 0)
        {
            questions.RemoveAt(0); 

            Task.Run(async () =>
            {
                await Task.Delay(1000);
                GetNextQuestion();
                questionNumber++;
            });
        }
        else
        {
            currentQuestion = null; // No more questions, game is finished
        }
    }

    // Start timer
    private void StartTimer()
    {
        timer?.Dispose();

        timer = new System.Threading.Timer(state =>
        {
            if (timeLeft > 0) 
            {
                timeLeft--;  
            }
            else
            {
                Task.Run(() => CheckAnswer(null));
                lives--;
            }
            StateHasChanged();
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    // Reset timer
    private void ResetTimer()
    {
        timer?.Dispose();
        timeLeft = 15;
    }
}